<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>types on hackeryarn</title>
    <link>https://hackeryarn.com/tags/types/</link>
    <description>Recent content in types on hackeryarn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hackeryarn.com/tags/types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type safe Django app, Part 1</title>
      <link>https://hackeryarn.com/post/django-returns-1/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hackeryarn.com/post/django-returns-1/</guid>
      <description>Django is a great framework for web development. Unfortunately, due to the nature of Python and web development in general, it often leads to hard to track down bugs and tangled code. We will take a look at one way to reign this in.
 Throughout this series we will follow the official Django tutorial while making the code safer and easier to reason about. We will accomplish this by enlist the help of mypy (for general type checking) and returns (for containers that will provide safety).</description>
    </item>
    
  </channel>
</rss>
