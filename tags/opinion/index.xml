<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opinion on hackeryarn</title>
    <link>https://hackeryarn.com/tags/opinion/</link>
    <description>Recent content in Opinion on hackeryarn</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hackeryarn.com/tags/opinion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>You don&#39;t need a map for that</title>
      <link>https://hackeryarn.com/post/maps/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/maps/</guid>
      <description>&lt;p&gt;&#xA;One of the most misused data structures is the humble map; hashmap, dictionary, hash table, etc.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;It&amp;#39;s a great data structure for quick storage and access of key value pairs. Unfortunately, because of its ease and availability, it becomes pervasive at jobs it has no business doing. The problem grows most visible in dynamically typed languages that make the map a first class citizen (Python, Ruby, Clojure, etc.), but it can creep up in any language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Right Abstraction for Lambdas</title>
      <link>https://hackeryarn.com/post/the-right-abstraction-for-lambdas/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/the-right-abstraction-for-lambdas/</guid>
      <description>&lt;p&gt;Serverless functions are a great alternative for many light tasks that would&#xA;traditionally required a server. They allow you to split up work across&#xA;mutiple small functions, and you only pay&#xA;for what you use. On top of that, they require less maintenance than managing your own&#xA;server or Kubernetes cluster.&lt;/p&gt;&#xA;&lt;p&gt;However, the single function per lambda approach can become too granular. Shared&#xA;functionality becomes hard to group together. You only have hard to enforce naming convention&#xA;for lambda that belong together. Then comes the problem of sharing code between lamdas. Do you need a library for a few common functions?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Redux Easy</title>
      <link>https://hackeryarn.com/post/making-redux-easy/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/making-redux-easy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; are a top choice for front end projects. &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; provides fast&#xA;performance, easy ways to create shared components, and a plethora of&#xA;libraries. &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; lets you simplify state management in your&#xA;application, but it has serious drawbacks.&lt;/p&gt;&#xA;&lt;p&gt;In large projects, &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; bloat your project with repetitive code. To&#xA;support a single store update, you need to create a reducer that handles an&#xA;action type which is dispatched from an action called inside a component. If&#xA;that process sounds tedious and confusing, that&amp;rsquo;s because it is. You end up&#xA;with tons of simple actions and reducers that all look alike.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why I Built a Static Site in Clojure</title>
      <link>https://hackeryarn.com/post/why-i-built-a-static-site-in-clojure/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/why-i-built-a-static-site-in-clojure/</guid>
      <description>&lt;p&gt;&#xA;At a summer barbecue, a friend asked if I could build a website for his new&#xA;restaurant. But what he didn&amp;#39;t know was that I haven&amp;#39;t built a static site in nearly a&#xA;decade. However I couldn&amp;#39;t let him spend thousands of dollars on a cookie cutter&#xA;website designed by a firm that knew nothing about his restaurant.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;We started coming up with ideas right away over a couple of beers.&#xA;He wanted manageable content, an Instagram feed, and an easy to change restaurant&#xA;menu. It quickly started sounding like a full on Content Management System and&#xA;not a simple website. I had to reel in this ambitious project before it&#xA;became a feature sink. So we decided to just make a beautiful static site.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Your Job Isn&#39;t Writing Code</title>
      <link>https://hackeryarn.com/post/your-job-isnt-writing-code/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/your-job-isnt-writing-code/</guid>
      <description>&lt;p&gt;Every line of code you write is a liability. That line of code you just wrote&#xA;adds complexity to your code base, gives you more nuances to remember, it&#xA;might even be a bug. If code is so expensive and dangerous. What can you do?&#xA;After all, you are a developer.&lt;/p&gt;&#xA;&lt;p&gt;The answer: You must remember your real job&amp;hellip; Delivering value to the users.&lt;/p&gt;&#xA;&lt;p&gt;Users don&amp;rsquo;t care what your class hierarchy looks like. They don&amp;rsquo;t care which&#xA;language or framework you&amp;rsquo;re using. They don&amp;rsquo;t even care if your system is a&#xA;cloud ready microservice. The user only cares that your product is helping them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Lodash Worked Itself Out of a Job</title>
      <link>https://hackeryarn.com/post/lodash/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/lodash/</guid>
      <description>&lt;p&gt;I really loved lodash. It brough the joy of compact functional code to&#xA;JavaScript. Especially 6 years ago when I first embraced it. It was a wonderful library.&#xA;Back then, there was no ES6, no Babel, and terrible browser incompatabilities&#xA;ran rampant. Lodash along with jQuery were the saving light of that time.&lt;/p&gt;&#xA;&lt;p&gt;I gravitated towards using Lodash because the first language I learned was&#xA;Scheme. It had functional programing at it&amp;rsquo;s core, and highly influanced how I&#xA;think about code to this day.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
