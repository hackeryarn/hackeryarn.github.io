<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hackeryarn</title>
    <link>https://hackeryarn.com/</link>
    <description>Recent content on hackeryarn</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hackeryarn.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Let&#39;s write a macro in Rust - Part 3</title>
      <link>https://hackeryarn.com/post/rust-macros-3/</link>
      <pubDate>Sun, 05 Oct 2025 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/rust-macros-3/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://hackeryarn.com/post/rust-macros-2/&#34;&gt;last part&lt;/a&gt; we covered all the fundamental techniques in writing macros. This enables us to write just about any macro we could think of, but knowing a few tricks can make the process much easier.&lt;/p&gt;&#xA;&lt;p&gt;In this part, we will build on our &lt;code&gt;where&lt;/code&gt; clause from the previous article. In the process we will allow the &lt;code&gt;where&lt;/code&gt; clause to support multiple comparison operator (instead of just &lt;code&gt;=&lt;/code&gt;) as well as multiple ways to join those operators (instead of just &lt;code&gt;and&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s write a macro in Rust - Part 2</title>
      <link>https://hackeryarn.com/post/rust-macros-2/</link>
      <pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/rust-macros-2/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://hackeryarn.com/post/rust-macros-1/&#34;&gt;last part&lt;/a&gt; we covered the very basics of macros and implemented a single argument query select. This was a good start, but only scratched the surface of what macros can do.&lt;/p&gt;&#xA;&lt;p&gt;In this part we will implement multi-field select and a basic &lt;code&gt;where&lt;/code&gt; calause. That will make our query macro far more useful.&lt;/p&gt;&#xA;&lt;h2 id=&#34;multi-field-select&#34;&gt;Multi-field select&lt;/h2&gt;&#xA;&lt;p&gt;After being able to select one field, the immediate next thing that comes to mind is selecting multiple fields. Just like before, lets start with the invocation syntax:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s write a macro in Rust - Part 1</title>
      <link>https://hackeryarn.com/post/rust-macros-1/</link>
      <pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/rust-macros-1/</guid>
      <description>&lt;p&gt;Macros are required to do some very helpful things in Rust, but this isn&amp;rsquo;t an article about any of those things.&lt;/p&gt;&#xA;&lt;p&gt;I became ennamored with macros many years ago when I read &lt;a href=&#34;https://gigamonkeys.com/book/&#34;&gt;Practical Common Lisp&lt;/a&gt; and saw the implementation of a SQL DSL that works with built in data structures. The whole implementation took less than a screen of code and absolutely blew away my expectations of what it took to create DSLs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>You don&#39;t need a map for that</title>
      <link>https://hackeryarn.com/post/maps/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/maps/</guid>
      <description>&lt;p&gt;&#xA;One of the most misused data structures is the humble map; hashmap, dictionary, hash table, etc.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;It&amp;#39;s a great data structure for quick storage and access of key value pairs. Unfortunately, because of its ease and availability, it becomes pervasive at jobs it has no business doing. The problem grows most visible in dynamically typed languages that make the map a first class citizen (Python, Ruby, Clojure, etc.), but it can creep up in any language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clojure GitHub Actions</title>
      <link>https://hackeryarn.com/post/clojure-actions/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/clojure-actions/</guid>
      <description>&lt;p&gt;&#xA;I recently took over the maintenance of an open source Clojure project. One of the first things I noticed was the lack CI or CD. These are things that aren&amp;#39;t required but can save a lot of work, especially for a public project.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The CI portion helps make sure that all pull requests pass tests and conform to the project&amp;#39;s coding style. The CD portion helps with deploying the project. And these parts become especially important if the project is in maintenance mode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distrobox in practice</title>
      <link>https://hackeryarn.com/post/distrobox/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/distrobox/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://distrobox.privatedns.org/&#34;&gt;Distrobox&lt;/a&gt; is the single piece of software that completely changed the way I work. If you&amp;rsquo;ve hear of or used &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; and thought it was a great idea but implemented in a really heavy handed manner, then Distrobox is exactly what you&amp;rsquo;ve been looking for.&lt;/p&gt;&#xA;&lt;p&gt;Within a month Distrobox became my primary dev environment and that hasn&amp;rsquo;t changed for over a year. In this post I hope to share how I use Distrobox and give you some tips for making the experience even better.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When DRY goes wrong</title>
      <link>https://hackeryarn.com/post/dry/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/dry/</guid>
      <description>&lt;p&gt;DRY has become a mantra throughout the industry. Any time repetitive code shows up, DRY gets applied as a cure all. If you even start to question DRYing up a piece of code, you are viewed as a heretic to the entire industry.&lt;/p&gt;&#xA;&lt;p&gt;Ok, maybe it&amp;rsquo;s not that bad, but many times DRY gets applied without much thought. This careless application of DRY leads to brittle code, making even simple changes scary because they could have a huge ripple effect.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Picking a Linux Distro</title>
      <link>https://hackeryarn.com/post/picking-a-linux-distro/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/picking-a-linux-distro/</guid>
      <description>&lt;p&gt;I recently started a new job that gave me the chance to run whatever Linux distribution would make me the most productive. In the face of complete freedom, I decided to re-evaluate my daily driver and see if there was a distribution that would give me the most up-to-date software while maintaining a stable system. The results of my search surprised even me.&lt;/p&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;I have ran Ubuntu on my home lab server for over a decade, and used it a daily driver from 2009 to 2014. I switched from Ubuntu because their package release cycle, even on the latest version, is too slow for my liking. At around the same time, rolling release distros were gaining popularity. So I jumped on the Arch train.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Managing local common lisp projects</title>
      <link>https://hackeryarn.com/post/local-common-lisp-projects/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/local-common-lisp-projects/</guid>
      <description>&lt;p&gt;When I started using lisp, I came from the world of modern dependency managers (npm, pip, maven, and the like). So I started searching for an equivalent in lisp. I quickly came across &lt;code&gt;quicklisp&lt;/code&gt;. To my surprise, however, &lt;code&gt;quicklisp&lt;/code&gt; worked differently than these packages. It works more like a dependency cache than true dependency manager, but that is a topic for another article.&lt;/p&gt;&#xA;&lt;p&gt;The biggest struggle that &lt;code&gt;quicklisp&lt;/code&gt; brought was managing local packages. &lt;code&gt;quicklisp&lt;/code&gt; had no way to reference a dependency at a certain path, and couldn&amp;rsquo;t automatically import the project I was in. This is all for good reason since ASDF (the common lisp build system) allows a lot of freedom.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type safe Django app, Part 3</title>
      <link>https://hackeryarn.com/post/django-returns-3/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/django-returns-3/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://hackeryarn.com/post/django-returns-2/&#34;&gt;Part 2&lt;/a&gt; we got a taste of&#xA;using &lt;code&gt;returns&lt;/code&gt; and created our first model methods.&lt;/p&gt;&#xA;&lt;p&gt;In this part, we will build out views that interact with databases and learn how to combine returns containers. This composition is the key to effectively using container types and where we will see the benefits of all our work.&lt;/p&gt;&#xA;&lt;h1 id=&#34;writ-views-that-actually-do-something&#34;&gt;Writ views that actually do something&lt;/h1&gt;&#xA;&lt;p&gt;The first view introduced in the official tutorial performs multiple actions which we will split up into individual functions. Writing individual functions will help us give names to the actions that we take, bring the types to the forefront, and clearly demonstrate how to compose small functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type safe Django app, Part 2</title>
      <link>https://hackeryarn.com/post/django-returns-2/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/django-returns-2/</guid>
      <description>&lt;p&gt;&#xA;In &lt;a href=&#34;https://hackeryarn.com/post/django-returns-1/&#34;&gt;Part 1&lt;/a&gt; of this series, we looked at how to setup a python project with types, setup our project, and used some basic types.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;In this part we will start working with the database, implement custom database methods, and look at how to use &lt;code&gt;returns&lt;/code&gt; to improve the safety of those methods.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Into the database&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&#xA;Let&amp;#39;s run our initial migrations and get rid of the error that we ignored in the first part.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type safe Django app, Part 1</title>
      <link>https://hackeryarn.com/post/django-returns-1/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/django-returns-1/</guid>
      <description>&lt;p&gt;&#xA;Django is a great framework for web development. Unfortunately, due to the nature of Python and web development in general, it often leads to hard to track down bugs and tangled code. We will take a look at one way to reign this in.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Throughout this series we will follow the &lt;a href=&#34;https://docs.djangoproject.com/en/4.0/intro/tutorial01/&#34;&gt;official Django tutorial&lt;/a&gt; while making the code safer and easier to reason about. We will accomplish this by enlist the help of &lt;a href=&#34;http://mypy-lang.org/&#34;&gt;mypy&lt;/a&gt; (for general type checking) and &lt;a href=&#34;https://github.com/dry-python/returns&#34;&gt;returns&lt;/a&gt; (for containers that will provide safety).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django With Hy</title>
      <link>https://hackeryarn.com/post/hy-django/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/hy-django/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://docs.hylang.org/en/stable/&#34;&gt;Hy&lt;/a&gt; introduces a List that gives you all the power of macros and the elegant Lisp&#xA;syntax while enabling the full power of Python.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Although it&amp;#39;s easy enough to use Python libraries in Hy, you just import&#xA;them as you would in Python, I was weary of using a full framework outside it&amp;#39;s&#xA;native language. To prove out this concept, I followed &lt;a href=&#34;https://docs.djangoproject.com/en/3.0/intro/tutorial01/&#34;&gt;the official django&#xA;tutorial&lt;/a&gt; using Hy.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;To my surprise I only ran into minor issues. The rest of the project worked&#xA;flawlessly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Embrace Your Constraints</title>
      <link>https://hackeryarn.com/post/embrace-the-constraints/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/embrace-the-constraints/</guid>
      <description>&lt;p&gt;&#xA;Engineers want to measure the quality and effectiveness of their work. They&#xA;turn to code coverage, burn down charts, and yearly goals, with the best&#xA;intention.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;These measurements provide quantitative data about how much planned work was&#xA;delivered, but they fail to tie the work to outcome. What good are 1,000&#xA;lines of code if the users never use the feature? These metrics distract from&#xA;the two question every professional should ask:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CLI Commands in Emacs</title>
      <link>https://hackeryarn.com/post/cli-in-emacs/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/cli-in-emacs/</guid>
      <description>&lt;p&gt;&#xA;A few months ago, Gabriel Gonzalez wrote an &lt;a href=&#34;http://www.haskellforall.com/2018/10/detailed-walkthrough-for-beginner.html&#34;&gt;excellent article&lt;/a&gt; on creating useful&#xA;tools with Haskell. He used an example of a small CLI tool that aligns the&#xA;equals signs of a multi-line text input. The article wrapped up by integrating&#xA;this tool into vim.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;I love the overarching concept in the article: create small tools that are&#xA;useful in multiple contexts. It&amp;#39;s directly inline with the Unix philosophy.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The only problem is that I am an Emacs user. So in this article, I wanted to&#xA;show how I get the same effect in Emacs. And demonstrating how to&#xA;take CLI interaction in the text editor even further.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hierarchies In a Hakyll Blog</title>
      <link>https://hackeryarn.com/post/hierarchies-in-hakyll/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/hierarchies-in-hakyll/</guid>
      <description>&lt;p&gt;&#xA;Creating hierarchy in a blog is a useful technique. It allows you to&#xA;have different sections by type of content. It lets users navigate&#xA;by their interests quickly. It makes your blog organized.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;My need for a hierarchy came when working on another blog - &lt;a href=&#34;https://dailyreadingnotes.com&#34;&gt;Daily Reading&#xA;Notes&lt;/a&gt;. That blog involves notes on books I read daily. Since each book&#xA;has multiple reading notes, I wanted to allow two forms of navigation: by a&#xA;grouping of all notes for a particular book and by posted date. The groupings also&#xA;needed to be dynamic. I didn&amp;#39;t want to write code or updated configurations every&#xA;time I added a new book.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Right Abstraction for Lambdas</title>
      <link>https://hackeryarn.com/post/the-right-abstraction-for-lambdas/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/the-right-abstraction-for-lambdas/</guid>
      <description>&lt;p&gt;Serverless functions are a great alternative for many light tasks that would&#xA;traditionally required a server. They allow you to split up work across&#xA;mutiple small functions, and you only pay&#xA;for what you use. On top of that, they require less maintenance than managing your own&#xA;server or Kubernetes cluster.&lt;/p&gt;&#xA;&lt;p&gt;However, the single function per lambda approach can become too granular. Shared&#xA;functionality becomes hard to group together. You only have hard to enforce naming convention&#xA;for lambda that belong together. Then comes the problem of sharing code between lamdas. Do you need a library for a few common functions?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Redux Easy</title>
      <link>https://hackeryarn.com/post/making-redux-easy/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/making-redux-easy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; are a top choice for front end projects. &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; provides fast&#xA;performance, easy ways to create shared components, and a plethora of&#xA;libraries. &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; lets you simplify state management in your&#xA;application, but it has serious drawbacks.&lt;/p&gt;&#xA;&lt;p&gt;In large projects, &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; bloat your project with repetitive code. To&#xA;support a single store update, you need to create a reducer that handles an&#xA;action type which is dispatched from an action called inside a component. If&#xA;that process sounds tedious and confusing, that&amp;rsquo;s because it is. You end up&#xA;with tons of simple actions and reducers that all look alike.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing Daily Reading Notes</title>
      <link>https://hackeryarn.com/post/daily-reading-notes/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/daily-reading-notes/</guid>
      <description>&lt;p&gt;Recently I ran an experiment of posting daily reading notes on this blog. This&#xA;was very much a personal experiment.&lt;/p&gt;&#xA;&lt;p&gt;Making these posts every day reinforced my reading habit. I felt motivated to&#xA;set aside time to read, and I got the chance to reflect on my reading. It&#xA;also provided the opportunity to share more with others.&lt;/p&gt;&#xA;&lt;p&gt;I plan on keeping this habit going, but this blog isn&amp;rsquo;t the right place for it.&#xA;I want to keep this blog dedicated to tech posts. So I decided to&#xA;create a dedicated site for my &lt;a href=&#34;https://dailyreadingnotes.com&#34;&gt;daily reading notes&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why I Built a Static Site in Clojure</title>
      <link>https://hackeryarn.com/post/why-i-built-a-static-site-in-clojure/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/why-i-built-a-static-site-in-clojure/</guid>
      <description>&lt;p&gt;&#xA;At a summer barbecue, a friend asked if I could build a website for his new&#xA;restaurant. But what he didn&amp;#39;t know was that I haven&amp;#39;t built a static site in nearly a&#xA;decade. However I couldn&amp;#39;t let him spend thousands of dollars on a cookie cutter&#xA;website designed by a firm that knew nothing about his restaurant.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;We started coming up with ideas right away over a couple of beers.&#xA;He wanted manageable content, an Instagram feed, and an easy to change restaurant&#xA;menu. It quickly started sounding like a full on Content Management System and&#xA;not a simple website. I had to reel in this ambitious project before it&#xA;became a feature sink. So we decided to just make a beautiful static site.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Your Job Isn&#39;t Writing Code</title>
      <link>https://hackeryarn.com/post/your-job-isnt-writing-code/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/your-job-isnt-writing-code/</guid>
      <description>&lt;p&gt;Every line of code you write is a liability. That line of code you just wrote&#xA;adds complexity to your code base, gives you more nuances to remember, it&#xA;might even be a bug. If code is so expensive and dangerous. What can you do?&#xA;After all, you are a developer.&lt;/p&gt;&#xA;&lt;p&gt;The answer: You must remember your real job&amp;hellip; Delivering value to the users.&lt;/p&gt;&#xA;&lt;p&gt;Users don&amp;rsquo;t care what your class hierarchy looks like. They don&amp;rsquo;t care which&#xA;language or framework you&amp;rsquo;re using. They don&amp;rsquo;t even care if your system is a&#xA;cloud ready microservice. The user only cares that your product is helping them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Universally Testable Dependencies in JavaScript</title>
      <link>https://hackeryarn.com/post/universally-testable-dependencies/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/universally-testable-dependencies/</guid>
      <description>&lt;p&gt;JavaScript dependencies are notoriously hard to mock and test across framework&#xA;and environments. However, &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection%3CPaste%3E&#34;&gt;Dependency Injection&lt;/a&gt; (DI) ensures testability. It&#xA;is common in statically typed languages, like Java or Go, but is also useful in&#xA;dynamic languages like JavaScript.&lt;/p&gt;&#xA;&lt;p&gt;This article will guide you through a simple technique that can apply&#xA;to any JavaScript code base, frontend or backend, independent of frameworks&#xA;and libraries.&lt;/p&gt;&#xA;&lt;p&gt;The technique I am going to demonstrate is arguably not true DI, since the&#xA;dependencies are still managed by the module using them. However, it&#xA;solves the dependency problem for testing which is the focus of this&#xA;article.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ClojureScript Setup for Leiningen Project With Emacs</title>
      <link>https://hackeryarn.com/post/clojurescript-setup/</link>
      <pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/clojurescript-setup/</guid>
      <description>&lt;p&gt;A good development environment if fundamental to being productive. This is&#xA;especially true for Lisps. A good environment can&#xA;greatly speed up your development process and allow you to utilize the full&#xA;power of Clojure or any other Lisp.&lt;/p&gt;&#xA;&lt;p&gt;This tutorial is focused on a &lt;a href=&#34;https://clojurescript.org/&#34;&gt;ClojureScript&lt;/a&gt; environment for a &lt;a href=&#34;https://leiningen.org/&#34;&gt;Leiningen&lt;/a&gt; based&#xA;project being developed in &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-emacs&#34;&gt;Why Emacs?&lt;/h1&gt;&#xA;&lt;p&gt;Emacs has a great setup for most programming languages but really shines when it&#xA;comes to Lisps, including Clojure. &lt;a href=&#34;https://cider.readthedocs.io/en/latest/&#34;&gt;Cider&lt;/a&gt; is the powerful package that allows easy&#xA;interaction with the Clojure REPL and many IDE like features. In combination with&#xA;&lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el&#34;&gt;clj-refactor&lt;/a&gt;, you get one of the most powerful toolkits out there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Lodash Worked Itself Out of a Job</title>
      <link>https://hackeryarn.com/post/lodash/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/lodash/</guid>
      <description>&lt;p&gt;I really loved lodash. It brough the joy of compact functional code to&#xA;JavaScript. Especially 6 years ago when I first embraced it. It was a wonderful library.&#xA;Back then, there was no ES6, no Babel, and terrible browser incompatabilities&#xA;ran rampant. Lodash along with jQuery were the saving light of that time.&lt;/p&gt;&#xA;&lt;p&gt;I gravitated towards using Lodash because the first language I learned was&#xA;Scheme. It had functional programing at it&amp;rsquo;s core, and highly influanced how I&#xA;think about code to this day.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Efficient CSV Imports in Rails</title>
      <link>https://hackeryarn.com/post/rails-csv-imports/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/rails-csv-imports/</guid>
      <description>&lt;p&gt;Rails has great capabilities for working CSV files. However, like with many&#xA;things, the most obvious way is not the most efficient.&lt;/p&gt;&#xA;&lt;p&gt;We noticed this when our server had major fluctuations in memory consumption.&#xA;After digging through metrics, made easy thanks to&#xA;&lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt; and &lt;a href=&#34;https://grafana.com&#34;&gt;Grafana&lt;/a&gt;. We noticed that the spikes were due to our CSV&#xA;uploads.&lt;/p&gt;&#xA;&lt;h1 id=&#34;examining-csv-import&#34;&gt;Examining CSV Import&lt;/h1&gt;&#xA;&lt;p&gt;Our processor is responsible for bringing in coordinates&#xA;from legacy systems and ones that cannot support our API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Phoenix talk</title>
      <link>https://hackeryarn.com/post/phoenix-talk/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/phoenix-talk/</guid>
      <description>&lt;p&gt;I recently gave a talk, at the local &lt;a href=&#34;http://www.fullstack.org/&#34;&gt;Fullstack Meetup&lt;/a&gt;, on the &lt;a href=&#34;http://www.phoenixframework.org/&#34;&gt;Phoenix Framework&lt;/a&gt;. Phoenix is the de&#xA;facto web framework for &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;Elixir&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In this talk, I cover some of the best features of &lt;a href=&#34;http://www.phoenixframework.org/&#34;&gt;Phoenix&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.erlang.org/&#34;&gt;Erlang&lt;/a&gt;: The platmor which Elixir and Phoenix are build on. (albeit&#xA;very brief overview of the major features)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/elixir-lang/plug&#34;&gt;Plug&lt;/a&gt;: The specification for composable module design that gives&#xA;Phoenix much of it&amp;rsquo;s power.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/ecto/Ecto.html&#34;&gt;Ecto&lt;/a&gt;: The database integration layer.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Close to the end, there is a short demo of an app showing how a typical Phoenix&#xA;app looks. In this portion, I also use &lt;a href=&#34;https://github.com/koudelka/visualixir&#34;&gt;Visualixir&lt;/a&gt; to demonstrate the process layout of the app and how comunication is handled between processes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Easy Universal Haskell Development Environment</title>
      <link>https://hackeryarn.com/post/universal-haskell-dev-enviornment/</link>
      <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/universal-haskell-dev-enviornment/</guid>
      <description>&lt;p&gt;Haskell is notoriously difficult to setup, which probably led to many people being scared away from ever getting started. However, there has been a lot of work done to address these short comings. And there is a way to setup a very pleasant environment thanks to the hard work of many projects.&lt;/p&gt;&#xA;&lt;p&gt;Traditional methods included:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Installing &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;The Haskell Platform&lt;/a&gt;, which was a great project in it&amp;rsquo;s time but always seems to lag a few GHC versions behind.&lt;/li&gt;&#xA;&lt;li&gt;Required using a text editor like &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt; or &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;. These are incredible tools and productivity boosters, if you take the time to learn them. Which is a pretty major time commitment in itself &lt;em&gt;I do suggest you learn one of these eventually, or use the vim/emacs mode of another tool.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;Complex package management through &lt;a href=&#34;https://wiki.haskell.org/Cabal-Install&#34;&gt;Cabal-Install&lt;/a&gt;. This tool caused either version hell from everything being installed globally or caused you to have to re-install all your dependencies for every project.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;tools-of-the-trade&#34;&gt;Tools of The Trade&lt;/h1&gt;&#xA;&lt;p&gt;We will be using these tools to solve the above problems and make the installation completely system agnostic. That&amp;rsquo;s right, this installation process with work on any platform OS X, Linux, and even Windows.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
