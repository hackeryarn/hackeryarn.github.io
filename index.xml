<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artem Chernyak&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Artem Chernyak&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ClojureScript setup for Leiningen project with Emacs</title>
      <link>http://localhost:1313/post/clojurescript-setup/</link>
      <pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/clojurescript-setup/</guid>
      <description>A good development environment if fundamental to being productive. This is especially true for Lisps. A good environment can greatly speed up your development process and allow you to utilize the full power of Clojure or any other Lisp.
This tutorial is focused on a ClojureScript environment for a Leiningen based project being developed in Emacs.
Why Emacs? Emacs has a great setup for most programming languages but really shines when it comes to Lisps, including Clojure.</description>
    </item>
    
    <item>
      <title>How Lodash worked itself out of a job</title>
      <link>http://localhost:1313/post/lodash/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/lodash/</guid>
      <description>I really loved lodash. It brough the joy of compact functional code to JavaScript. Especially 6 years ago when I first embraced it. It was a wonderful library. Back then, there was no ES6, no Babel, and terrible browser incompatabilities ran rampant. Lodash along with jQuery were the saving light of that time.
I gravitated towards using Lodash because the first language I learned was Scheme. It had functional programing at it&amp;rsquo;s core, and highly influanced how I think about code to this day.</description>
    </item>
    
    <item>
      <title>Efficient CSV imports in Rails</title>
      <link>http://localhost:1313/post/rails-csv-imports/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/rails-csv-imports/</guid>
      <description>Rails has great capabilities for working CSV files. However, like with many things, the most obvious way is not the most efficient.
We noticed this when our server had major fluctuations in memory consumption. After digging through metrics, made easy thanks to Prometheus and Grafana. We noticed that the spikes were due to our CSV uploads.
Examining CSV import Our processor is responsible for bringing in coordinates from legacy systems and ones that cannot support our API.</description>
    </item>
    
    <item>
      <title>Phoenix talk</title>
      <link>http://localhost:1313/post/phoenix-talk/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/phoenix-talk/</guid>
      <description>I recently gave a talk, at the local Fullstack Meetup, on the Phoenix Framework. Phoenix is the de facto web framework for Elixir.
In this talk, I cover some of the best features of Phoenix:
 Erlang: The platmor which Elixir and Phoenix are build on. (albeit very brief overview of the major features) Plug: The specification for composable module design that gives Phoenix much of it&amp;rsquo;s power. Ecto: The database integration layer.</description>
    </item>
    
    <item>
      <title>Easy universal Haskell development environment</title>
      <link>http://localhost:1313/post/universal-haskell-dev-enviornment/</link>
      <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/universal-haskell-dev-enviornment/</guid>
      <description>Haskell is notoriously difficult to setup, which probably led to many people being scared away from ever getting started. However, there has been a lot of work done to address these short comings. And there is a way to setup a very pleasant environment thanks to the hard work of many projects.
Traditional methods included:
 Installing The Haskell Platform, which was a great project in it&amp;rsquo;s time but always seems to lag a few GHC versions behind.</description>
    </item>
    
  </channel>
</rss>