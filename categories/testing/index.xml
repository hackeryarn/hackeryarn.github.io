<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on hackeryarn</title>
    <link>https://hackeryarn.com/categories/testing/</link>
    <description>Recent content in Testing on hackeryarn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hackeryarn.com/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Universally Testable Dependencies in JavaScript</title>
      <link>https://hackeryarn.com/post/universally-testable-dependencies/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hackeryarn.com/post/universally-testable-dependencies/</guid>
      <description>JavaScript dependencies are notoriously hard to mock and test across framework and environments. However, Dependency Injection (DI) ensures testability. It is common in statically typed languages, like Java or Go, but is also useful in dynamic languages like JavaScript.
This article will guide you through a simple technique that can apply to any JavaScript code base, frontend or backend, independent of frameworks and libraries.
The technique I am going to demonstrate is arguably not true DI, since the dependencies are still managed by the module using them.</description>
    </item>
    
  </channel>
</rss>