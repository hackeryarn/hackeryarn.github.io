<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on hackeryarn</title>
    <link>https://hackeryarn.com/categories/ruby/</link>
    <description>Recent content in Ruby on hackeryarn</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Jun 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hackeryarn.com/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Efficient CSV Imports in Rails</title>
      <link>https://hackeryarn.com/post/rails-csv-imports/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://hackeryarn.com/post/rails-csv-imports/</guid>
      <description>&lt;p&gt;Rails has great capabilities for working CSV files. However, like with many&#xA;things, the most obvious way is not the most efficient.&lt;/p&gt;&#xA;&lt;p&gt;We noticed this when our server had major fluctuations in memory consumption.&#xA;After digging through metrics, made easy thanks to&#xA;&lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt; and &lt;a href=&#34;https://grafana.com&#34;&gt;Grafana&lt;/a&gt;. We noticed that the spikes were due to our CSV&#xA;uploads.&lt;/p&gt;&#xA;&lt;h1 id=&#34;examining-csv-import&#34;&gt;Examining CSV Import&lt;/h1&gt;&#xA;&lt;p&gt;Our processor is responsible for bringing in coordinates&#xA;from legacy systems and ones that cannot support our API.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
